// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum Role {
  ADMIN
  JOBSEEKER
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum JobApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @db.Date
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?          @unique
  image               String?
  gender              String?
  accounts            Account[]
  sessions            Session[]
  role                Role             @default(JOBSEEKER)
  phone               String?
  likedJobListingsIds String[]         @default([]) @db.ObjectId
  appliedFor          JobApplication[]
  emailVerified       Boolean?         @default(false)
  cv                  Cv[]
  likedJobListings    JobListing[]     @relation(fields: [likedJobListingsIds], references: [id])
}

model JobApplication {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  appliedById  String               @db.ObjectId
  jobListingId String               @db.ObjectId
  createdAt    DateTime             @default(now()) @db.Date
  status       JobApplicationStatus @default(PENDING)

  appliedBy  User       @relation(fields: [appliedById], references: [id])
  joblisting JobListing @relation(fields: [jobListingId], references: [id])

  @@unique([appliedById, jobListingId])
  @@fulltext([appliedById, jobListingId, createdAt(sort: Desc)])
}

model PositionScope {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  createdAt   DateTime     @default(now()) @db.Date
  active      Boolean      @default(true)
  jobListings JobListing[]

  @@fulltext([name, createdAt(sort: Asc)])
}

model JobListing {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  serialNumber    String   @unique
  professionId    String   @db.ObjectId
  areaId          String   @db.ObjectId
  positionScopeId String   @db.ObjectId
  createdAt       DateTime @default(now()) @db.Date
  likedByIds      String[] @default([]) @db.ObjectId

  likedBy         User[]           @relation(fields: [likedByIds], references: [id])
  active          Boolean          @default(true)
  area            Area             @relation(fields: [areaId], references: [id])
  profession      Profession       @relation(fields: [professionId], references: [id])
  positionScope   PositionScope    @relation(fields: [positionScopeId], references: [id])
  JobApplications JobApplication[]

  @@fulltext([name, serialNumber, createdAt(sort: Desc)])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String   @unique
  expires DateTime

  @@unique([id, token])
}

model Area {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  createdAt   DateTime     @default(now())
  active      Boolean      @default(true)
  jobListings JobListing[]

  @@fulltext([name, createdAt(sort: Asc)])
}

model Profession {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  createdAt   DateTime     @default(now()) @db.Date
  active      Boolean      @default(true)
  jobListings JobListing[]

  @@fulltext([name, createdAt(sort: Asc)])
}

model Cv {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Date
  file      Bytes

  @@unique([id, userId])
  @@fulltext([userId, createdAt(sort: Desc)])
}
