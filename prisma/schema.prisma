// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum Role {
  ADMIN
  JOBSEEKER
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?          @unique
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role             @default(JOBSEEKER)
  phone           Int
  jobApplications JobApplication[]
}

model JobApplication {
  userId       String   @db.ObjectId
  jobListingId String   @db.ObjectId
  date         DateTime
  id           String   @id @default(auto()) @map("_id") @db.ObjectId

  user           User       @relation(fields: [userId], references: [id]) //, onDelete: Cascade
  job_listing_id JobListing @relation(fields: [jobListingId], references: [id]) //, onDelete: Cascade
}

model JobListing {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  proffetion_id String @db.ObjectId

  proffetionId   Proffesion       @relation(fields: [proffetion_id], references: [id])
  JobApplications JobApplication[]
}

model Proffesion {
  name       String
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  JobListings JobListing[]
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String   @unique
  expires DateTime

  @@unique([id, token])
}

model Area {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now()) @db.Date
  active    Boolean  @default(true)

  @@index([name, createdAt(sort: Asc)])
}

model Profession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now()) @db.Date
  active    Boolean  @default(true)

  @@index([name, createdAt(sort: Asc)])
}
